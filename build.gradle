import com.android.build.api.transform.Transform
import com.android.build.gradle.BaseExtension
import org.gradle.api.tasks.diagnostics.internal.graph.nodes.RenderableDependency
import org.gradle.api.tasks.diagnostics.internal.graph.nodes.RenderableModuleResult

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
//    ext.kotlin_version = '1.2.71'
    ext.kotlin_version = '1.2.0'
    repositories {
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
}

project.gradle.addProjectEvaluationListener(new ProjectEvaluationListener() {
    @Override
    void beforeEvaluate(Project project) {

    }

    @Override
    void afterEvaluate(Project project, ProjectState state) {
        /*if (project.plugins.hasPlugin(AppPlugin) || project.plugins.hasPlugin(LibraryPlugin)) {
            BaseExtension appExtension = project.android
            List<Transform> transformList = appExtension.getTransforms()
            println ' afterevaluate project=' + project.name
            transformList.each { Transform it ->
                println ' Transform=' + it.getClass() + '.=' + it.getName()
            }
        }*/
    }
})

subprojects {
    /*task allDeps(type: DependencyReportTask,group:'help') <<{

    }*/
    /*task allDeps(group:'help') <<{
        println '----:'+project.name+'-----'
        ResolutionResult result= project.configurations.compile.incoming.getResolutionResult()
        RenderableDependency root = new RenderableModuleResult(result.getRoot());
        println 'result:name='+root.name

        for (RenderableDependency child : root.getChildren()) {
            println 'result:name='+child.name
            if (!child.getChildren().isEmpty()){
                for (RenderableDependency child2 : child.getChildren()){
                    println '------result:name='+child2.name
                }
            }
        }
    }*/
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
